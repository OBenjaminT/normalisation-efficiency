pub fn get_user_table() -> Table {
table = Table {
name: "person".to_string(),\ncolumns: vec![\n("id".to_string(), "INTEGER PRIMARY KEY".to_string()),\n("name".to_string(), "TEXT NOT NULL".to_string()),\n("data".to_string(), "BLOB".to_string()),\n],\nforeign_keys: vec![("NULL".to_string(), "NULL".to_string(), "NULL".to_string())],\n}\ntable\n
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE yeargroup \n(YearID Text PRIMARY KEY,\nName Text,\nNationalCurriculumYear Text,\nCode Text,\nHeadOfYear Text,\nAssistantHeadOfYear Text,\nFOREIGN KEY (HeadOfYear) REFERENCES users(Username),\nFOREIGN KEY (AssistantHeadOfYear) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE year \n(yearID Integer PRIMARY KEY,\nStartYear Text,\nEndYear Text,\nStartDate Text,\nEndDate Text,\nCurrentYear Integer,\n-- Bool TermsTermID Integer,\nTermsName Text,\nTermsStartDate Text,\nTermsEndDate Text);".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE users \n(Firstname Text,\nSurname Text,\nYearGroup Text,\nMiddlename Text,\nPreferredname Text,\nUsername Text PRIMARY KEY,\nStatus Text,\nYear Integer,\nEmail Text,\nSchoolID Text,\nIsamsID Text,\nIsamsCode Text,\nTitle Text,\nLastActive Text,\nPupilType Text,\nAcademicStudy Text,\nPositions Text,\nExpoID Text,\nArchived Integer DEFAULT 0,\n-- Bool House Text,\nRoles Text,\nFOREIGN KEY (YearGroup) REFERENCES yeargroup(YearID),\nFOREIGN KEY (House) REFERENCES house(HouseID),\nFOREIGN KEY (Roles) REFERENCES role(Name),\nFOREIGN KEY (Username) REFERENCES tutorGroup(Students),\nFOREIGN KEY (Username) REFERENCES Sets(Students),\nFOREIGN KEY (Username) REFERENCES prep(DueForUser),\nFOREIGN KEY (Username) REFERENCES lesson(Students));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE tutorGroup \n(Name Text PRIMARY KEY,\nTutors Text,\nStudents Text,\nAcademicYear Text,\nYear Text,\nArchived Integer DEFAULT 0,\n-- Bool House Text,\nFOREIGN KEY (Tutors) REFERENCES users(Username),\nFOREIGN KEY (AcademicYear) REFERENCES year(yearID),\nFOREIGN KEY (House) REFERENCES house(HouseID));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE subject \n(SubjectID Text PRIMARY KEY,\nDepartment Text,\nName Text,\nCode Text,\nReportName Text,\nFOREIGN KEY (Department) REFERENCES department(DepartmentID));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE Sets \n(SetsID Text PRIMARY KEY,\nSubject Text,\nName Text,\nYear Text,\nArchived Integer DEFAULT 0,\n-- Bool Teacher Text,\nStudents Text,\nYearGroup Text,\nFOREIGN KEY (Subject) REFERENCES subject(SubjectID),\nFOREIGN KEY (Year) REFERENCES year(yearID),\nFOREIGN KEY (Teacher) REFERENCES users(Username),\nFOREIGN KEY (YearGroup) REFERENCES yeargroup(YearID));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE room \n(Building Text,\nCode Text PRIMARY KEY,\nName Text,\nInitials Text,\nFOREIGN KEY (Building) REFERENCES building(BuildingID));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE role \n(Name Text PRIMARY KEY,\nAuth Text,\nType Text);".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE prep \n(Sets Text,\nDueLesson Text,\nTitle Text PRIMARY KEY,\nDescription Text,\nCreatedAt Text,\nDueAt Text,\nDueForCompleted Integer DEFAULT 0,\n-- Bool DueForUpdatedAt Text,\nDueFor Text,\nPersonal Integer,\n-- Bool LastEditedAt Text,\nAssignedDate Text,\nArchived Integer DEFAULT 0,\n-- Bool DueForUser Text,\nAssignedBy Text,\nFiles Text,\nFOREIGN KEY (Sets) REFERENCES Sets(SetsID),\nFOREIGN KEY (DueLesson) REFERENCES lesson(lessonID),\nFOREIGN KEY (AssignedBy) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE period \n(PeriodID Text PRIMARY KEY,\nDay Text,\nStartTime Text,\nEndTime Text,\nLongName Text,\nShortName Text,\nWeek Text);".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE notification \n(Sender Text,\nRecipientsUser Text,\nTitle Text PRIMARY KEY,\nMessage Text,\nRecipientsRead Integer,\n-- Bool RecipientsReadAt Text,\nSentAt Text,\nMetaPage Text,\nMetaParam Text,\nFOREIGN KEY (Sender) REFERENCES users(Username),\nFOREIGN KEY (RecipientsUser) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE module \n(CreatedBy Text,\nName Text PRIMARY KEY,\nIcon Text,\nLink Text,\nExternalMod Integer,\n-- Bool Colour Text,\nShowFor Text,\nPreviewTitle Text,\nPreviewSubtitle Text,\nPreviewLink Text,\nStaff Integer,\n-- Bool New Integer DEFAULT 0,\n-- Bool FOREIGN KEY (CreatedBy) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE lesson \n(lessonID Integer PRIMARY KEY,\nSets Text,\nArchived Integer DEFAULT 0,\n-- Bool Subject Text,\nStart Text,\nRoom Text,\nEndTime Text,\nPeriod Text,\nTeacher Text,\nStudents Text,\nFOREIGN KEY (Sets) REFERENCES Sets(SetsID),\nFOREIGN KEY (Subject) REFERENCES subject(SubjectID),\nFOREIGN KEY (Room) REFERENCES room(Code),\nFOREIGN KEY (Period) REFERENCES period(PeriodID),\nFOREIGN KEY (Teacher) REFERENCES users(Username),\nFOREIGN KEY (Archived) REFERENCES lesson(Sets));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE house \n(Name Text PRIMARY KEY,\nCode Text,\nType Text,\nHousemaster Text,\nAssistantHousemaster Text,\nLogo Text,\nHouseID Text,\nFOREIGN KEY (Housemaster) REFERENCES users(Username),\nFOREIGN KEY (AssistantHousemaster) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE files \n(fileID Integer PRIMARY KEY,\nUploadedBy Text,\nS3Key Text,\nContentType Text,\nFileName Text,\nTitle Text,\nUploadedAt Text,\nFOREIGN KEY (fileID) REFERENCES prep(Files),\nFOREIGN KEY (UploadedBy) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE department \n(DepartmentID Text PRIMARY KEY,\nName Text,\nHeadOfDepartment Text,\nFOREIGN KEY (HeadOfDepartment) REFERENCES users(Username));".to_string();
    sql 
}

pub fn get__table() -> String {
    let sql = "CREATE TABLE building \n(BuildingID Text PRIMARY KEY,\nName Text,\nInitials Text,\nDescription Text);".to_string();
    sql 
}